import {Component, EventEmitter, Input, Output} from '@angular/core';
import {
  BadgeComponent,
  ButtonDirective,
  CardBodyComponent,
  CardComponent,
  CardFooterComponent,
  CardHeaderComponent,
  ColComponent,
  ModalBodyComponent,
  ModalComponent,
  ModalFooterComponent,
  ModalHeaderComponent,
  ModalModule,
  ModalTitleDirective,
  RowComponent,
  SpinnerComponent,
  TabDirective,
  TabPanelComponent,
  TabsComponent,
  TabsContentComponent,
  TabsListComponent,
} from '@coreui/angular';
import {IconDirective} from '@coreui/icons-angular';
import {DatePipe, NgFor, NgIf} from '@angular/common';
import {FormsModule} from '@angular/forms';
import {MarkdownModule} from 'ngx-markdown';
import {RepoService} from "../../../service/RepoService";

@Component({
  selector: 'app-vulnerability-details',
  standalone: true,
  imports: [
    ModalModule,
    ModalComponent,
    ModalHeaderComponent,
    ModalTitleDirective,
    ModalBodyComponent,
    ModalFooterComponent,
    NgIf,
    NgFor,
    RowComponent,
    ColComponent,
    CardComponent,
    CardHeaderComponent,
    CardBodyComponent,
    CardFooterComponent,
    ButtonDirective,
    IconDirective,
    TabsComponent,
    TabsListComponent,
    TabsContentComponent,
    TabPanelComponent,
    TabDirective,
    SpinnerComponent,
    BadgeComponent,
    FormsModule,
    DatePipe,
    MarkdownModule,
  ],
  templateUrl: './vulnerability-details.component.html',
  styleUrls: ['./vulnerability-details.component.scss']
})
export class VulnerabilityDetailsComponent {
  @Input() detailsModal: boolean = false;
  @Input() selectedRowId: number | null = null;
  @Input() singleVuln: any;
  @Input() suppressReason: string = '';
  @Input() suppressReasons: string[] = [];
  @Input() repoData: any;
  @Input() selectedBranch: string | null = null;
  @Input() isAddingComment: boolean = false;
  @Input() newComment: string = '';
  @Input() repoId: string = '';


  @Output() handleDetailsModalEvent = new EventEmitter<boolean>();
  @Output() closeModalEvent = new EventEmitter<void>();
  @Output() suppressFindingEvent = new EventEmitter<void>();
  @Output() reactivateFindingEvent = new EventEmitter<void>();
  @Output() addCommentEvent = new EventEmitter<void>();
  @Output() newCommentChange = new EventEmitter<string>();
  @Output() suppressed = new EventEmitter<void>(); // To notify parent after successful suppression



  constructor(
      private repoService: RepoService
  ) {}


  /**
   * Handle modal visibility changes
   */
  handleDetailsModal(visible: boolean): void {
    this.handleDetailsModalEvent.emit(visible);
  }

  /**
   * Close the modal
   */
  closeModal(): void {
    this.closeModalEvent.emit();
  }

  /**
   * Suppress the finding with the selected reason
   */
  suppressFinding(): void {
    if (this.selectedRowId && this.suppressReason) {
      this.repoService
          .supressFinding(+this.repoId, this.selectedRowId, this.suppressReason)
          .subscribe({
            next: (response) => {
              // Emit an event to notify the parent component
              this.suppressed.emit();
              // Close the modal
              this.closeModal();
            },
            error: (error) => {
              console.error('Error suppressing finding:', error);
            }
          });
    }
  }

  /**
   * Reactivate a suppressed finding
   */
  reactivateFinding(): void {
    this.reactivateFindingEvent.emit();
  }

  /**
   * Add a new comment
   */
  addComment(): void {
    this.addCommentEvent.emit();
  }

  /**
   * Handle comment input changes
   */
  onNewCommentChange(value: string): void {
    this.newComment = value;
    this.newCommentChange.emit(value);
  }

  /**
   * Checks if the vulnerability source type should have a clickable link.
   * @param source The vulnerability source (e.g., 'SAST', 'SCA').
   */
  isLinkableSource(source: string): boolean {
    const linkableSources = ['SAST', 'IAC', 'SECRETS', 'DAST'];
    return linkableSources.includes(source);
  }

  /**
   * Get link to the vulnerability in the repository
   */
  getRepositoryLink(): string {
    const finding = this.singleVuln?.vulnsResponseDto;
    if (!finding?.location) {
      return '#';
    }

    // For DAST, the location is a full URL and can be used directly.
    if (finding.source === 'DAST') {
      return finding.location.startsWith('http') ? finding.location : `//${finding.location}`;
    }

    if (!this.repoData?.repourl) {
      return '#';
    }

    const location = finding.location;
    const repoUrl = this.repoData.repourl;
    const branch = this.selectedBranch || this.repoData?.defaultBranch?.name;

    const match = location.match(/(.*):(\d+)/);
    if (!match) return repoUrl;

    const [, filePath, lineNumber] = match;

    if (repoUrl.includes('github.com')) {
      return `${repoUrl}/blob/${branch}/${filePath}#L${lineNumber}`;
    } else if (repoUrl.includes('gitlab.com')) {
      const baseUrl = repoUrl.replace(/\/?$/, '');
      return `${baseUrl}/-/blob/${branch}/${filePath}#L${lineNumber}`;
    }

    return repoUrl;
  }

  /**
   * Format the vulnerability location for display
   */
  getFormattedLocation(): string {
    const finding = this.singleVuln?.vulnsResponseDto;
    if (!finding?.location) {
      return 'Location not available';
    }

    // For these types, display the raw location string.
    if (finding.source === 'DAST' || finding.source === 'SCA' || finding.source === 'GITLAB_SCANNER') {
      return finding.location;
    }

    const location = finding.location;
    const match = location.match(/(.*):(\d+)/);
    if (!match) return location;

    const [, filePath, lineNumber] = match;
    return `${filePath}:${lineNumber}`;
  }
}