import {Component, Input, OnInit} from '@angular/core';
import {ColComponent, RowComponent,} from '@coreui/angular';
import {IconDirective} from '@coreui/icons-angular';
import {NgIf} from '@angular/common';

@Component({
  selector: 'app-vulnerability-summary',
  standalone: true,
  imports: [
    RowComponent,
    ColComponent,
    NgIf,
    IconDirective,
  ],
  templateUrl: './vulnerability-summary.component.html',
  styleUrls: ['./vulnerability-summary.component.scss']
})
export class VulnerabilitySummaryComponent implements OnInit {
  @Input() counts: any = {
    critical: 0,
    high: 0,
    rest: 0,
    urgent: 0,
    notable: 0,
    autoFixable: 0,
    fixed: 0
  };

  @Input() icons: any;

  ngOnInit(): void {
    // Initialize icons if not provided
    if (!this.icons) {
      this.icons = {
        cilBug: { name: 'cil-bug' },
        cilCenterFocus: { name: 'cil-center-focus' },
        cilCommentSquare: { name: 'cil-comment-square' },
        cilWrench: { name: 'cil-wrench' },
        cilCheckAlt: { name: 'cil-check-alt' }
      };
    }

    // Ensure all count properties exist to avoid null errors
    this.counts = {
      critical: this.counts?.critical || 0,
      high: this.counts?.high || 0,
      rest: this.counts?.rest || 0,
      urgent: this.counts?.urgent || 0,
      notable: this.counts?.notable || 0,
      autoFixable: this.counts?.autoFixable || 0,
      fixed: this.counts?.fixed || 0
    };
  }

  /**
   * Calculate the total number of vulnerabilities
   */
  getTotalCount(): number {
    return (this.counts?.critical || 0) +
        (this.counts?.high || 0) +
        (this.counts?.rest || 0);
  }

  /**
   * Calculate percentage of a specific vulnerability type
   */
  getPercentage(count: number): number {
    const total = this.getTotalCount();
    if (total === 0) return 0;

    return Math.round((count / total) * 100);
  }
}