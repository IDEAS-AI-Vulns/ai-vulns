import { Component, EventEmitter, Input, Output } from '@angular/core';
import {
  BadgeComponent,
  ButtonDirective,
  CardBodyComponent,
  CardComponent,
  CardFooterComponent,
  CardHeaderComponent,
  ColComponent,
  ModalBodyComponent,
  ModalComponent,
  ModalFooterComponent,
  ModalHeaderComponent,
  ModalTitleDirective,
  RowComponent,
  SpinnerComponent,
  TabDirective,
  TabPanelComponent,
  TabsComponent,
  TabsContentComponent,
  TabsListComponent
} from '@coreui/angular';
import { IconDirective } from '@coreui/icons-angular';
import { DatePipe, NgFor, NgIf } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { MarkdownModule } from 'ngx-markdown';

@Component({
  selector: 'app-cloud-vulnerability-details',
  standalone: true,
  imports: [
    ModalComponent,
    ModalHeaderComponent,
    ModalTitleDirective,
    ModalBodyComponent,
    ModalFooterComponent,
    RowComponent,
    ColComponent,
    CardComponent,
    CardHeaderComponent,
    CardBodyComponent,
    CardFooterComponent,
    ButtonDirective,
    IconDirective,
    SpinnerComponent,
    TabsComponent,
    TabsListComponent,
    TabsContentComponent,
    TabPanelComponent,
    TabDirective,
    BadgeComponent,
    NgIf,
    NgFor,
    DatePipe,
    FormsModule,
    MarkdownModule
  ],
  templateUrl: './cloud-vulnerability-details.component.html',
  styleUrls: ['./cloud-vulnerability-details.component.scss']
})
export class CloudVulnerabilityDetailsComponent {
  @Input() detailsModal: boolean = false;
  @Input() selectedRowId: number | null = null;
  @Input() singleVuln: any;
  @Input() isAddingComment: boolean = false;
  @Input() newComment: string = '';

  @Output() handleDetailsModalEvent = new EventEmitter<boolean>();
  @Output() closeModalEvent = new EventEmitter<void>();
  @Output() addCommentEvent = new EventEmitter<void>();
  @Output() newCommentChange = new EventEmitter<string>();

  handleDetailsModal(visible: boolean): void {
    this.handleDetailsModalEvent.emit(visible);
  }

  closeModal(): void {
    this.closeModalEvent.emit();
  }

  addComment(): void {
    this.addCommentEvent.emit();
  }

  onNewCommentChange(value: string): void {
    this.newComment = value;
    this.newCommentChange.emit(value);
  }
}