package io.mixeway.mixewayflowapi.integrations.gemini.service;

import com.google.genai.Client;
import com.google.genai.types.*;
import lombok.extern.log4j.Log4j2;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

@Service
@Log4j2
public class GeminiVulnerabilityService {

    private final Client genaiClient;

    public GeminiVulnerabilityService(@Value("${genai.api.key}") String apiKey) {
        this.genaiClient = Client.builder()
                                .apiKey(apiKey)
                                .build();
    }

    public List<String> analyzeVulnerability(String vulnerabilityText) {

        String systemPrompt = "You are a software developer tasked with analyzing a vulnerability report.";
        String userPrompt = String.format("""
            You have been given a report with detected vulnerabilities within your code.
            You need to review it and plan how to fix them and in which order.
            For each given CVE, provide a list of constraints that must be met for the vulnerability to be exploitable in the code (e.g., usage of function X, etc.).
            The answer should be easily processable by the automation mechanism so that it can be directly inserted into the database.
            Return only a list of constraints - each constraint should be in one line of text
            The vulnerability text to review is:
            %s
            """, vulnerabilityText);

        // Create the content object with the system and user parts.
        Content content = Content.fromParts(
                Part.fromText(systemPrompt),
                Part.fromText(userPrompt)
        );

        // Configure the generation with the Google Search tool.
        GenerateContentConfig config = GenerateContentConfig.builder()
                .tools(Collections.singletonList(
                        Tool.builder()
                        .googleSearch(GoogleSearch.builder().build())
                        .build()))
                .build();

        // Call the API and get the response.
        GenerateContentResponse response = genaiClient.models.generateContent(
                "gemini-2.5-flash", // You can specify your preferred model
                content,
                config
        );

        // Logging the generated text.
        log.info("AI responded with following constraints \n{}", response.text());

        //Splitting
        return response.text() == null ? Collections.emptyList() :
                Arrays.stream(response.text().split("\\R"))
                .map(String::trim)
                .filter(line -> !line.isEmpty())
                .toList();
    }
}
