package io.mixeway.mixewayflowapi.domain.vulnerability;

import io.mixeway.mixewayflowapi.db.entity.Vulnerability;
import io.mixeway.mixewayflowapi.db.repository.VulnerabilityRepository;
import io.mixeway.mixewayflowapi.exceptions.VulnerabilityException;
import lombok.RequiredArgsConstructor;
import lombok.extern.log4j.Log4j2;
import org.springframework.stereotype.Service;

/**
 * Service class responsible for updating the details of a {@link Vulnerability}.
 * This service allows patching (partial update) of a vulnerability's description, reference, and recommendation.
 */
@Service
@RequiredArgsConstructor
@Log4j2
public class UpdateVulnerabilityService {

    private final VulnerabilityRepository vulnerabilityRepository;

    /**
     * Updates the specified fields of a {@link Vulnerability} entity.
     *
     * @param id The ID of the vulnerability to update.
     * @param description The new description for the vulnerability.
     * @param ref The new reference for the vulnerability.
     * @param recommendation The new recommendation for the vulnerability.
     * @throws VulnerabilityException if the vulnerability with the given ID does not exist.
     */
    public void patch(Long id, String description, String ref, String recommendation) {
        // Fetch the vulnerability from the repository, throw an exception if not found
        Vulnerability vulnerability = vulnerabilityRepository.findById(id).orElseThrow();

        // Update the vulnerability's fields
        vulnerability.patch(description, ref, recommendation);

        // Save the updated vulnerability back to the repository
        vulnerabilityRepository.save(vulnerability);

        // Log the update operation
        log.info("[Update Vulnerability] Updating description for {}", vulnerability.getName());
    }
}
