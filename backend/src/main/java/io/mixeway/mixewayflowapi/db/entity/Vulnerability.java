package io.mixeway.mixewayflowapi.db.entity;

import com.fasterxml.jackson.annotation.JsonIgnore;
import jakarta.persistence.*;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import lombok.ToString;
import org.hibernate.annotations.CreationTimestamp;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

@Entity
@Getter
@ToString
@RequiredArgsConstructor
@Table(name = "vulnerability")
public final class Vulnerability {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private final long id;

    @Column(nullable = false, unique = true, length = 200)
    private final String name;

    @Column(columnDefinition = "TEXT")
    private String description;

    @Column(columnDefinition = "TEXT")
    private String ref;

    @Column(columnDefinition = "TEXT")
    private String recommendation;

    @CreationTimestamp
    @Column(name = "inserted_date", nullable = false, updatable = false)
    private LocalDateTime insertedDate;

    @Enumerated(EnumType.STRING)
    @Column
    private final Finding.Severity severity;

    @ManyToMany(fetch = FetchType.EAGER)
    @JoinTable(
        name = "vulnerability_component",
        joinColumns = @JoinColumn(name = "vulnerability_id"),
        inverseJoinColumns = @JoinColumn(name = "component_id")
    )
    @JsonIgnore
    private List<Component> components = new ArrayList<>();;

    // Default constructor for JPA
    protected Vulnerability() {
        this.id = 0;
        this.name = null;
        this.description = null;
        this.ref = null;
        this.recommendation = null;
        this.severity = null;
    }

    // Public constructor for creating new instances
    public Vulnerability(String name, String description, String ref, String recommendation, Finding.Severity severity) {
        this.id = 0;
        this.name = name;
        this.description = description;
        this.ref = ref;
        this.recommendation = recommendation;
        this.severity = severity;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Vulnerability that = (Vulnerability) o;
        return Objects.equals(name, that.name);
    }

    @Override
    public int hashCode() {
        return Objects.hash(name);
    }

    public void patch(String description, String ref, String recommendation){
        this.description = description;
        this.ref = ref;
        this.recommendation = recommendation;
    }
}
