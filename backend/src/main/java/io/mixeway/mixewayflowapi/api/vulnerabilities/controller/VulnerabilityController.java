package io.mixeway.mixewayflowapi.api.vulnerabilities.controller;

import io.mixeway.mixewayflowapi.api.components.dto.GetComponentsResponseDto;
import io.mixeway.mixewayflowapi.api.constraint.dto.ConstraintDto;
import io.mixeway.mixewayflowapi.api.vulnerabilities.dto.EditVulnerabilityRequestDto;
import io.mixeway.mixewayflowapi.api.vulnerabilities.dto.GetVulnerabilitiesResponseDto;
import io.mixeway.mixewayflowapi.api.vulnerabilities.dto.VulnerabilityDto;
import io.mixeway.mixewayflowapi.api.vulnerabilities.service.VulnerabilityService;
import io.mixeway.mixewayflowapi.utils.StatusDTO;
import lombok.RequiredArgsConstructor;
import lombok.extern.log4j.Log4j2;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import java.security.Principal;
import java.util.List;


/**
 * REST controller responsible for handling API requests related to vulnerabilities.
 */
@RestController
@Validated
@RequiredArgsConstructor
@Log4j2
public class VulnerabilityController {
    private final VulnerabilityService vulnerabilityService;

    /**
     * Retrieves a list of vulnerabilities along with the repositories affected by each vulnerability.
     * The repositories included in the response are filtered based on the user's access rights.
     *
     * @param principal the security principal representing the currently authenticated user
     * @return a ResponseEntity containing a list of GetVulnerabilitiesResponseDto objects and an HTTP status code
     */
    @PreAuthorize("hasAuthority('USER')")
    @GetMapping(value= "/api/v1/vulnerabilities")
    public ResponseEntity<List<GetVulnerabilitiesResponseDto>> getVulnerabilities(Principal principal){
        try {
            // Call the service to get vulnerabilities and affected repos
            return new ResponseEntity<>(vulnerabilityService.getAllVulnerabilitiesWithAffectedRepos(principal), HttpStatus.OK);
        } catch (Exception e){
            // Log the exception and return a BAD_REQUEST status
            log.error("Error retrieving vulnerabilities", e);
            return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
        }
    }

    @PreAuthorize("hasAuthority('USER')")
    @GetMapping(value= "/api/v1/vulnerabilities/simple")
    public ResponseEntity<List<VulnerabilityDto>> getVulnerabilitiesSimple(Principal principal){
        try {
            // Call the service to get vulnerabilities and affected repos
            return new ResponseEntity<>(vulnerabilityService.getsimplerVulnList(principal), HttpStatus.OK);
        } catch (Exception e){
            // Log the exception and return a BAD_REQUEST status
            log.error("Error retrieving vulnerabilities", e);
            return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
        }
    }

    /**
     * Endpoint to edit an existing vulnerability. This endpoint is restricted to users with the 'ADMIN' authority.
     *
     * @param editVulnerabilityRequestDto The DTO containing the updated vulnerability details.
     * @param principal The security principal of the currently authenticated user.
     * @return A {@link ResponseEntity} containing a {@link StatusDTO} with the status "OK" if the update is successful,
     *         or a {@link HttpStatus#BAD_REQUEST} if an error occurs during the update process.
     */
    @PreAuthorize("hasAuthority('ADMIN')")
    @PostMapping(value = "/api/v1/vulnerability")
    public ResponseEntity<StatusDTO> editVuln(@RequestBody EditVulnerabilityRequestDto editVulnerabilityRequestDto,
                                              Principal principal) {
        try {
            // Call the service to update the vulnerability details
            vulnerabilityService.updateVuln(editVulnerabilityRequestDto);
            return new ResponseEntity<>(new StatusDTO("OK"), HttpStatus.OK);
        } catch (Exception e) {
            // Log the exception and return a BAD_REQUEST status
            log.error("Error updating vulnerabilities", e);
            return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
        }
    }


    //@PreAuthorize("hasAuthority('ADMIN')")
    @GetMapping(value = "/api/v1/vulnerability/update")
    public ResponseEntity<List<GetVulnerabilitiesResponseDto>> updateConstraints() {
        try {
            return new ResponseEntity<>(vulnerabilityService.updateAllConstraints(), HttpStatus.OK);
        } catch (Exception e) {
            log.error("Failed to retrieve vulnerabilities", e);
            return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
        }
    }


    //@PreAuthorize("hasAuthority('ADMIN')")
    @GetMapping(value = "/api/v1/vulnerability/update/{id}")
    public ResponseEntity<List<GetVulnerabilitiesResponseDto>> updateConstraintsForVulnerabilityById(@PathVariable(name = "id")Long id) {
        try {
            return new ResponseEntity<>(vulnerabilityService.updateConstraintsForVulnerabilityById(id), HttpStatus.OK);
        } catch (Exception e) {
            log.error("Failed to retrieve vulnerabilities", e);
            return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
        }
    }
}
