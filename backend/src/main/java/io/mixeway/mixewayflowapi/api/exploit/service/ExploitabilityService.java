package io.mixeway.mixewayflowapi.api.exploit.service;

import io.mixeway.mixewayflowapi.db.entity.CodeRepo;
import io.mixeway.mixewayflowapi.db.entity.Finding;
import io.mixeway.mixewayflowapi.domain.coderepo.FindCodeRepoService;
import io.mixeway.mixewayflowapi.domain.finding.FindFindingService;
import io.mixeway.mixewayflowapi.exceptions.GitException;
import io.mixeway.mixewayflowapi.integrations.exploit.service.AnalyzeExploitabilityService;
import io.mixeway.mixewayflowapi.utils.ExcelService;
import io.mixeway.mixewayflowapi.scanmanager.service.ScanManagerService;
import io.mixeway.mixewayflowapi.utils.ZipService;
import lombok.RequiredArgsConstructor;
import lombok.extern.log4j.Log4j2;
import org.apache.commons.io.FileUtils;
import org.springframework.stereotype.Service;

import java.io.File;
import java.io.IOException;
import java.util.List;

@Service
@RequiredArgsConstructor
@Log4j2
public class ExploitabilityService {

    private final FindCodeRepoService findCodeRepoService;
    private final ScanManagerService scanManagerService;
    private final FindFindingService findFindingService;
    private final AnalyzeExploitabilityService analyzeExploitabilityService;

    public String analyzeRepository(long repoId) throws GitException {
        log.info("Starting preparation for analysis of the repository id: {}", repoId);

        CodeRepo codeRepo = findCodeRepoService.findById(repoId).orElseThrow();

        assert codeRepo.getName() != null;
        String repoName = codeRepo.getName().replace("/", "-");
        String repoDirName =    "volnerability-check-main" + File.separator +
                                "data" + File.separator +
                                repoName;

        log.info("Repository found. Downloading repository");

        String response;
        try {
            FileUtils.deleteDirectory(new File(repoDirName));
            response = scanManagerService.fetchRepository(null,
                                                            codeRepo.getRepourl(),
                                                            codeRepo.getAccessToken(),
                                                            codeRepo.getDefaultBranch(),
                                                            repoDirName);
            ZipService.zipDirectory(new File(repoDirName), new File("volnerability-check-main" + File.separator + "data" + File.separator + repoName + ".zip"));

            log.info("Repository downloaded. Starting preparation of the vulnerability Excel");
            List<Finding> findings = findFindingService.getCodeRepoFindings(codeRepo, codeRepo.getDefaultBranch());
            String excelName = ExcelService.createVulnerabilitySummaryExcel(findings, codeRepo.getRepourl(), repoName, "volnerability-check-main" + File.separator + "data");

            log.info("Starting execution of the exploitability analysis");
            FileUtils.deleteDirectory(new File(repoDirName));
            analyzeExploitabilityService.analyzeRepository(repoName);

        } catch (IOException | InterruptedException e) {
            throw new GitException(e.getMessage());
        }
        return response;
    }
}
